// <autogenerated>
//   This file was generated by T4 code generator Main.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;
using Autofac;
using Autofac.Builder;
using Autofac.Core;
using Autofac.Integration.Mvc;
using Mt.Core;
using Mt.Core.Data;
using Mt.Core.Infrastructure;
using Mt.Core.Infrastructure.DependencyManagement;
using SanXing.Data;
using SanXing.Data.Service;
using SanXing.Data.Impl;

namespace SanXing.Web.Framework
{
    public class DependencyRegistrar : IDependencyRegistrar
    {
        public virtual void Register(ContainerBuilder builder, ITypeFinder typeFinder)
        {
            builder.Register(c => new HttpContextWrapper(HttpContext.Current) as HttpContextBase)
                .As<HttpContextBase>()
                .InstancePerRequest();
            builder.Register(c => c.Resolve<HttpContextBase>().Request)
                .As<HttpRequestBase>()
                .InstancePerRequest();
            builder.Register(c => c.Resolve<HttpContextBase>().Response)
                .As<HttpResponseBase>()
                .InstancePerRequest();
            builder.Register(c => c.Resolve<HttpContextBase>().Server)
                .As<HttpServerUtilityBase>()
                .InstancePerRequest();
            builder.Register(c => c.Resolve<HttpContextBase>().Session)
                .As<HttpSessionStateBase>()
                .InstancePerRequest();

            //注册所有的Controller
            builder.RegisterControllers(typeFinder.GetAssemblies().ToArray());

            builder.Register<IDbContext>(c => new MtObjectContext())
                .InstancePerRequest();

            builder.RegisterGeneric(typeof(EfRepository<>))
                .As(typeof(IRepository<>)).InstancePerRequest();



            builder.RegisterType<ContactRecordService>().As<IContactRecordService>().InstancePerRequest();

            builder.RegisterType<ContactTypeService>().As<IContactTypeService>().InstancePerRequest();

            builder.RegisterType<CostService>().As<ICostService>().InstancePerRequest();

            builder.RegisterType<PlanService>().As<IPlanService>().InstancePerRequest();

            builder.RegisterType<UserService>().As<IUserService>().InstancePerRequest();

            builder.RegisterType<ContactService>().As<IContactService>().InstancePerRequest();

            builder.RegisterType<BlogService>().As<IBlogService>().InstancePerRequest();

            builder.RegisterType<TimeCostService>().As<ITimeCostService>().InstancePerRequest();

            builder.RegisterType<ContactWayService>().As<IContactWayService>().InstancePerRequest();

            builder.RegisterType<CostTypeService>().As<ICostTypeService>().InstancePerRequest();

            builder.RegisterType<RichTypeService>().As<IRichTypeService>().InstancePerRequest();

            builder.RegisterType<BlogTypeService>().As<IBlogTypeService>().InstancePerRequest();

            builder.RegisterType<TimeCostTypeService>().As<ITimeCostTypeService>().InstancePerRequest();


        }

        public int Order
        {
            get { return 0; }
        }
    }
}
