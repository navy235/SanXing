<#+
// <copyright file="NTierEF.ChangeSetTT.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public class ChangeSetTemplate : Template
{
    public EdmUtility EdmUtility { get; set; }
    public string Namespace { get; set; }
    public string ModelBaseNamespace { get; set; }
    private string file = null;
    public string File
    {
        get { return file != null ? file : string.Format(@"{0}\{0}ChangeSet.g.cs", EdmUtility.ModelName); }
        set { file = value; }
    }

    public ChangeSetTemplate(string project = null, EdmUtility edmUtility = null, string defaultNameSpace = null)
    {
        if (!string.IsNullOrWhiteSpace(project))
        {
            base.Output.Project = project;
        }
        this.EdmUtility = edmUtility;
        this.Namespace = defaultNameSpace;
        this.ModelBaseNamespace = "NTier.Common.Domain.Model";
    }

    /// <summary>
    /// Directs output of the template to a separate file by default. User can override
    /// default behavior by assigning <see cref="Rendering"/> event handler.
    /// </summary>
    protected override void OnRendering(System.EventArgs e)
    {
        if (EdmUtility == null)
        {
            throw new Exception("Missing property EdmUtility");
        }
        if (string.IsNullOrWhiteSpace(Namespace))
        {
            throw new Exception("Missing property Namespace");
        }
        if (string.IsNullOrWhiteSpace(ModelBaseNamespace))
        {
            throw new Exception("Missing property ModelBaseNamespace");
        }

        this.Output.File = this.File;
        base.OnRendering(e);
    }

    public override string TransformText()
    {
        WriteHeader(ModelBaseNamespace);
#>
namespace <#= this.Namespace + "." + EdmUtility.ModelName #>
{
    [DataContract(IsReference = true)]
    public partial class <#= EdmUtility.ModelName #>ChangeSet : IChangeSet
    {
        #region Constructor

        public <#=EdmUtility.ModelName#>ChangeSet(<#=string.Join(", ", EdmUtility.Container.BaseEntitySets.OfType<EntitySet>().Select(e => "IEnumerable<" + EdmUtility.Code.Escape(e.ElementType) + "> " + FirstCaseLow(EdmUtility.Code.Escape(e))).ToArray())#>)
        {
            // retrieve changes sets (modified entities)
<#+
    foreach (EntitySet entitySet in EdmUtility.Container.BaseEntitySets.OfType<EntitySet>())
    {
#>
            var <#=FirstCaseLow(EdmUtility.Code.Escape(entitySet.ElementType))#>ChangeSet = <#=FirstCaseLow(EdmUtility.Code.Escape(entitySet))#>.GetChangeSet();
<#+
    }
#>

            // reduce entities (copy changed values)
<#+
    foreach (EntitySet entitySet in EdmUtility.Container.BaseEntitySets.OfType<EntitySet>())
    {
#>
            var <#=FirstCaseLow(EdmUtility.Code.Escape(entitySet))#>Map = <#=FirstCaseLow(EdmUtility.Code.Escape(entitySet.ElementType))#>ChangeSet.ReduceToModifications();
<#+
    }

    if (EdmUtility.Container.BaseEntitySets.OfType<EntitySet>().Count() > 1)
    {
#>

            // fixup relations (replaces related entities with reduced entites)
            this.FixupRelations(
                this.Union(<#=string.Join(", ", EdmUtility.Container.BaseEntitySets.OfType<EntitySet>().Select(e => FirstCaseLow(EdmUtility.Code.Escape(e)) + "Map.CastToEntityTuple()").ToArray())#>),
                this.Union(<#=string.Join(", ", EdmUtility.Container.BaseEntitySets.OfType<EntitySet>().Select(e => FirstCaseLow(EdmUtility.Code.Escape(e.ElementType)) + "ChangeSet").ToArray())#>)
            );
<#+
    }
#>

<#+
    foreach (EntitySet entitySet in EdmUtility.Container.BaseEntitySets.OfType<EntitySet>())
    {
#>
            if (<#=FirstCaseLow(EdmUtility.Code.Escape(entitySet))#>Map.Count > 0) this.<#=EdmUtility.Code.Escape(entitySet)#> = <#=FirstCaseLow(EdmUtility.Code.Escape(entitySet))#>Map.Select(e => e.Item2).ToList();
<#+
    }
#>
        }

        protected <#=EdmUtility.ModelName#>ChangeSet(<#=EdmUtility.ModelName#>ChangeSet changeSet)
        {
<#+
    foreach (EntitySet entitySet in EdmUtility.Container.BaseEntitySets.OfType<EntitySet>())
    {
#>
            this.<#=EdmUtility.Code.Escape(entitySet)#> = changeSet.<#=EdmUtility.Code.Escape(entitySet)#>;
<#+
    }
#>
        }

        #endregion Constructor

        #region DataMember

<#+
    foreach (EntitySet entitySet in EdmUtility.Container.BaseEntitySets.OfType<EntitySet>())
    {
#>
        [DataMember]
        public List<<#=EdmUtility.Code.Escape(entitySet.ElementType)#>> <#=EdmUtility.Code.Escape(entitySet)#> { get; private set; }

<#+
    }
#>
        #endregion DataMember

        #region IsEmpty

        public bool IsEmpty
        {
            get
            {
                return <#=string.Join(" &&" + Environment.NewLine + "                    ", EdmUtility.Container.BaseEntitySets.OfType<EntitySet>().Select(e => EdmUtility.Code.Escape(e) + " == null").ToArray())#>;
            }
        }

        #endregion IsEmpty

        #region IEnumerable

        public IEnumerator<Entity> GetEnumerator()
        {
<#+
    foreach (EntitySet entitySet in EdmUtility.Container.BaseEntitySets.OfType<EntitySet>())
    {
#>
            if (<#=EdmUtility.Code.Escape(entitySet)#> != null && <#=EdmUtility.Code.Escape(entitySet)#>.Count > 0)
            {
                foreach (var item in <#=EdmUtility.Code.Escape(entitySet)#>)
                {
                    yield return item;
                }
            }

<#+
    }
#>
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        #endregion IEnumerable
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }

    private void WriteHeader(params string[] extraUsings)
    {
#>
//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator <#= System.IO.Path.GetFileName(T4Context.Host.TemplateFile) #>.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
<#=String.Join(String.Empty, extraUsings.OrderBy(u => u).Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    }

    private string FirstCaseLow(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return value;
        }

        return value.Substring(0, 1).ToLower() + value.Substring(1, value.Length - 1);
    }
}
#>
