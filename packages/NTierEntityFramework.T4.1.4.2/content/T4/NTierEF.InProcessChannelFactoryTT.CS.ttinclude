<#+
// <copyright file="NTierEF.InProcessChannelFactoryTT.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public class InProcessChannelFactoryTemplate : Template
{
    public EdmUtility EdmUtility { get; set; }
    public string Namespace { get; set; }
    public string ChannelFactoryNamespace { get; set; }
    public string ServiceContractNamespace { get; set; }
    public string ServiceNamespace { get; set; }
    private string file = null;
    public string File
    {
        get { return file != null ? file : string.Format(@"{0}InProcessChannelFactory.g.cs", EdmUtility.ModelName); }
        set { file = value; }
    }

    public InProcessChannelFactoryTemplate(string project = null, EdmUtility edmUtility = null, string defaultNameSpace = null, string serviceContractNamespace = null, string serviceNamespace = null)
    {
        if (!string.IsNullOrWhiteSpace(project))
        {
            base.Output.Project = project;
        }
        this.EdmUtility = edmUtility;
        this.Namespace = defaultNameSpace;
        this.ChannelFactoryNamespace = "NTier.Client.Domain.Service.ChannelFactory";
        this.ServiceContractNamespace = serviceContractNamespace;
        this.ServiceNamespace = serviceNamespace;
    }

    /// <summary>
    /// Directs output of the template to a separate file by default. User can override
    /// default behavior by assigning <see cref="Rendering"/> event handler.
    /// </summary>
    protected override void OnRendering(System.EventArgs e)
    {
        if (EdmUtility == null)
        {
            throw new Exception("Missing property EdmUtility");
        }
        if (string.IsNullOrWhiteSpace(Namespace))
        {
            throw new Exception("Missing property Namespace");
        }
        if (string.IsNullOrWhiteSpace(ChannelFactoryNamespace))
        {
            throw new Exception("Missing property ChannelFactoryNamespace");
        }
        if (string.IsNullOrWhiteSpace(ServiceContractNamespace))
        {
            throw new Exception("Missing property ServiceContractNamespace");
        }
        if (string.IsNullOrWhiteSpace(ServiceNamespace))
        {
            throw new Exception("Missing property ServiceNamespace");
        }

        this.Output.File = this.File;
        base.OnRendering(e);
    }

    public override string TransformText()
    {
        WriteHeader(ChannelFactoryNamespace, ServiceContractNamespace + ".Contracts", ServiceNamespace);
#>
namespace <#=Namespace#>
{
    [Export(typeof(IChannelFactory<I<#=EdmUtility.ModelName#>DataService>))]
    public sealed class <#=EdmUtility.ModelName#>InProcessChannelFactory : IChannelFactory<I<#=EdmUtility.ModelName#>DataService>
    {
        public I<#=EdmUtility.ModelName#>DataService CreateChannel()
        {
            return new <#=EdmUtility.ModelName#>DataService();
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }


    private void WriteHeader(params string[] extraUsings)
    {
#>
//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator <#= System.IO.Path.GetFileName(T4Context.Host.TemplateFile) #>.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel.Composition;
<#=String.Join(String.Empty, extraUsings.OrderBy(u => u).Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    }
}
#>
