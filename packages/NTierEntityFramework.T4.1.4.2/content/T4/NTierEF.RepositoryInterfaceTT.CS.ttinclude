<#+
// <copyright file="NTierEF.RepositoryTT.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public class RepositoryInterfaceTemplate : Template
{
    public EdmUtility EdmUtility { get; set; }
    public string Namespace { get; set; }
    public string ModelNamespace { get; set; }
    public string ModelBaseNamespace { get; set; }
    public string RepositoryBaseNamespace { get; set; }
    private string file = null;
    public string File
    {
        get { return file != null ? file : string.Format(@"I{0}Repository.g.cs", EdmUtility.ModelName); }
        set { file = value; }
    }

    public RepositoryInterfaceTemplate(string project = null, EdmUtility edmUtility = null, string defaultNameSpace = null, string modelNamespace = null)
    {
        if (!string.IsNullOrWhiteSpace(project))
        {
            base.Output.Project = project;
        }
        this.EdmUtility = edmUtility;
        this.Namespace = defaultNameSpace;
        this.ModelNamespace = modelNamespace;
        this.ModelBaseNamespace = "NTier.Common.Domain.Model";
        this.RepositoryBaseNamespace = "NTier.Server.Domain.Repositories";
    }

    /// <summary>
    /// Directs output of the template to a separate file by default. User can override
    /// default behavior by assigning <see cref="Rendering"/> event handler.
    /// </summary>
    protected override void OnRendering(System.EventArgs e)
    {
        if (EdmUtility == null)
        {
            throw new Exception("Missing property EdmUtility");
        }
        if (string.IsNullOrWhiteSpace(Namespace))
        {
            throw new Exception("Missing property Namespace");
        }
        if (string.IsNullOrWhiteSpace(ModelNamespace))
        {
            throw new Exception("Missing property ModelNamespace");
        }
        if (string.IsNullOrWhiteSpace(ModelBaseNamespace))
        {
            throw new Exception("Missing property ModelBaseNamespace");
        }
        if (string.IsNullOrWhiteSpace(RepositoryBaseNamespace))
        {
            throw new Exception("Missing property RepositoryBaseNamespace");
        }

        this.Output.File = this.File;
        base.OnRendering(e);
    }

    public override string TransformText()
    {
        WriteHeader(ModelBaseNamespace, ModelNamespace + "." + EdmUtility.ModelName, RepositoryBaseNamespace);
#>
namespace <#=Namespace#>
{
    <#=Accessibility.ForType(EdmUtility.Container)#> partial interface I<#=EdmUtility.ModelName#>Repository : IRepository
    {
        #region EntitySets
<#+
        EdmUtility.Region.Begin("ObjectSet Properties", 2);

        foreach (EntitySet entitySet in EdmUtility.Container.BaseEntitySets.OfType<EntitySet>())
        {
            if (Accessibility.ForReadOnlyProperty(entitySet) == "public")
            {
#>

        IEntitySet<<#=EdmUtility.Code.Escape(entitySet.ElementType)#>> <#=EdmUtility.Code.Escape(entitySet)#> { get; }
<#+
            }
        }

        EdmUtility.Region.End();

        EdmUtility.Region.Begin("Function Imports");

        foreach (EdmFunction edmFunction in EdmUtility.Container.FunctionImports)
        {
            var parameters = FunctionImportParameter.Create(edmFunction.Parameters, EdmUtility.Code, EdmUtility.EF);
            string paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
            if (edmFunction.ReturnParameter == null)
            {
                continue;
            }
            string returnTypeElement = EdmUtility.Code.Escape(EdmUtility.EF.GetElementType(edmFunction.ReturnParameter.TypeUsage));

            if (AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)) == "public")
            {
#>
        ObjectResult<<#=returnTypeElement#>> <#=EdmUtility.Code.Escape(edmFunction)#>(<#=paramList#>);
<#+
            }
        }
        EdmUtility.Region.End();
#>

        #endregion EntitySets
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }



    private void WriteHeader(params string[] extraUsings)
    {
#>
//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator <#= System.IO.Path.GetFileName(T4Context.Host.TemplateFile) #>.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
<#=String.Join(String.Empty, extraUsings.OrderBy(u => u).Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    }

    string AccessibilityAndVirtual(string accessibility)
    {
        if (accessibility != "private")
        {
            return accessibility + " virtual";
        }

        return accessibility;
    }
}
#>
