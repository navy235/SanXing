<#+
// <copyright file="NTierEF.EntityMetadataTT.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public class EntityMetadataTemplate : Template
{
    public EdmUtility EdmUtility { get; set; }
    public string Namespace { get; set; }
    public string ModelBaseNamespace { get; set; }
    public string EntityName { get; set; }
    private string file = null;
    public string File
    {
        get { return file != null ? file : string.Format(@"{0}\{1}.metadata.cs", EdmUtility.ModelName, EntityName); }
        set { file = value; }
    }

    public EntityMetadataTemplate(string project = null, EdmUtility edmUtility = null, string defaultNameSpace = null, string entityName = null)
    {
        if (!string.IsNullOrWhiteSpace(project))
        {
            base.Output.Project = project;
        }
        base.Output.PreserveExistingFile = true;
        this.EdmUtility = edmUtility;
        this.Namespace = defaultNameSpace;
        this.ModelBaseNamespace = "NTier.Common.Domain.Model";
        this.EntityName = entityName;
    }

    /// <summary>
    /// Directs output of the template to a separate file by default. User can override
    /// default behavior by assigning <see cref="Rendering"/> event handler.
    /// </summary>
    protected override void OnRendering(System.EventArgs e)
    {
        if (EdmUtility == null)
        {
            throw new Exception("Missing property EdmUtility");
        }
        if (string.IsNullOrWhiteSpace(EntityName))
        {
            throw new Exception("Missing property EntityName");
        }
        if (string.IsNullOrWhiteSpace(Namespace))
        {
            throw new Exception("Missing property Namespace");
        }
        if (string.IsNullOrWhiteSpace(ModelBaseNamespace))
        {
            throw new Exception("Missing property ModelBaseNamespace");
        }

        this.Output.File = this.File;
        base.OnRendering(e);
    }

    public override string TransformText()
    {
        var typeMapper = EdmUtility.TypeMapper;
        EntityType entity = EdmUtility.ItemCollection.GetItems<EntityType>().Single(e => e.Name == EntityName);

        WriteHeader(ModelBaseNamespace);
#>
namespace <#=Namespace + "." + EdmUtility.ModelName#>
{
    [MetadataType(typeof(<#=EdmUtility.Code.Escape(entity)#>Metadata))]
    partial class <#=EdmUtility.Code.Escape(entity)#>
    {
    }

    // This class allows you to attach custom attributes to properties of the <#=EdmUtility.Code.Escape(entity)#> class.
    //
    // For example, the following marks the Xyz property as a
    // required property and specifies the format for valid values:
    //    [Required]
    //    [RegularExpression("[A-Z][A-Za-z0-9]*")]
    //    [StringLength(32)]
    //    string Xyz;
    <#=Accessibility.ForType(entity)#> sealed class <#=EdmUtility.Code.Escape(entity)#>Metadata
    {
        // this class is not meant to be instantiated by client code
        private <#=EdmUtility.Code.Escape(entity)#>Metadata() { }

#pragma warning disable 0169

        #region Simple Properties
<#+
        foreach (EdmProperty edmProperty in typeMapper.GetSimpleProperties(entity))
        {
#>

        public <#=EdmUtility.Code.Escape(edmProperty.TypeUsage)#> <#=EdmUtility.Code.Escape(edmProperty)#>;
<#+
        }
#>

        #endregion Simple Properties

        #region Complex Properties
<#+
    foreach(EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entity))
    {
#>

        public <#=EdmUtility.Code.Escape(edmProperty.TypeUsage)#> <#=EdmUtility.Code.Escape(edmProperty)#>;
<#+
    }
#>

        #endregion Complex Properties

        #region Navigation Properties
<#+
    foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(np => np.DeclaringType == entity))
    {
#>

<#+
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>

        public TrackableCollection<<#=EdmUtility.Code.Escape(navProperty.ToEndMember.GetEntityType())#>> <#=EdmUtility.Code.Escape(navProperty)#>;
<#+
        }
        else
        {
#>

        public <#=EdmUtility.Code.Escape(navProperty.ToEndMember.GetEntityType())#> <#=EdmUtility.Code.Escape(navProperty)#>;
<#+
        }
    }
#>

        #endregion Navigation Properties

#pragma warning restore 0169
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }

    private void WriteHeader(params string[] extraUsings)
    {
#>
//------------------------------------------------------------------------------
// <initially_autogenerated>
//   This file was originally generated by T4 code generator <#= System.IO.Path.GetFileName(T4Context.Host.TemplateFile) #>.
//   This file is meant to be edited manually and modifications do not get lost on regeneration.
//   In case you want this file to be deleted or regenerated you have to remove (e.g. delete or rename) the existing version manually.
// </initially_autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
<#=String.Join(String.Empty, extraUsings.OrderBy(u => u).Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    }
}
#>
