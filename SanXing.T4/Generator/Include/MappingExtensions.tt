
<#+
    // <copyright file="AutoMapperStartupTask.tt" company="">
    //  Copyright © . All Rights Reserved.
    // </copyright>

    public class MappingExtensions : MtTemplate
    {

        public MappingExtensions(IEnumerable<Type> types):base(types)
        {  
        }

        /// <summary>
        /// 获取 生成的文件名，根据模型名定义
        /// </summary>
        public override string FileName
        {
            get
            { 
                return "MappingExtensions.cs";
            }
        }

        public override string ModuleName
        {
            get
            { 
                return _model.Name;
            }
        }

        public override string SavePath
        {
            get
            { 
                return "\\ModelMapper";
            }
        }

        public void RenderPropertry(){
            WriteLine(" ");
            foreach(Type modelType in _types)
            {
                T4ModelInfo minfo = new T4ModelInfo(modelType, true);
                WriteLine(string.Format("             public static {0}Model ToModel(this {0} entity)",minfo.Name));
                WriteLine("             {");
                WriteLine(string.Format("                  return Mapper.Map<{0}, {0}Model>(entity);",minfo.Name));
                WriteLine("             }");
                WriteLine(" ");

                WriteLine(string.Format("             public static {0} ToEntity(this {0}Model model)",minfo.Name));
                WriteLine("             {");
                WriteLine(string.Format("                  return Mapper.Map<{0}Model, {0}>(model);",minfo.Name));
                WriteLine("             }");
                WriteLine(" ");

                WriteLine(string.Format("             public static {0} ToEntity(this {0}Model model,{0} entity )",minfo.Name));
                WriteLine("             {");
                WriteLine("                  return Mapper.Map(model, entity);");
                WriteLine("             }");
                WriteLine(" ");
       
            }
        }

        public override string TransformText()
        {
            base.TransformText();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using AutoMapper;
using Mt.Core.Infrastructure;
using SanXing.Data.Models;

namespace SanXing.ViewModels.ModelMapper
{
    public static class MappingExtensions
    {
        <#+
            RenderPropertry();
        #>

    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>
